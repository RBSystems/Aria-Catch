/* GreenPoint TDI - RBP

Development Notes _________________________________________________________________________ Development Notes /*
v0.3  : Added Threadsafe and while(1) gather construct in RX$ change event. 
v0.2  : ???
v0.1  : Bug Fix - Parsing crestron internal delimiter now pulls in all trailing \x03 chrs. Prevents controls
			from breaking when the checksum byte is \x03, also prevents error posts of accessing array out
			of bounds.
		Changed sReply to a global var g_sReply
		Got rid of drop down list for the dummy parameter 

v0.0  : Module name change... origanlly developed for the City Center in Las Vegas 2009


#If_Defined cDebug
#EndIf

Development Notes _________________________________________________________________________ Development Notes */

// ________________________________________________________________________________ Module Compile Time Behavior
//#Define_Constant cDebug            1
#OUTPUT_SHIFT           1
#ANALOG_SERIAL_EXPAND   OutputsWithParams
#CATEGORY               "34" // Mixer
#DEFAULT_VOLATILE  
#ENABLE_STACK_CHECKING
#Large_Stack

#If_Defined cDebug
#ENABLE_TRACE
#EndIf

// ___________________________________________________________________________________________________ Constants
#DEFINE_CONSTANT        cMaxModules 128

// _____________________________________________________________________________________________________ F1 Help
//#HINT                              ""
//#HELP_PDF_FILE ""

#HELP_BEGIN
GreenPoint TDI   wwww.greenpointtdi.com

Routes reply strings from "BSS Node vX.X" module to individual "BSS" Modules program modules

Node modulesRX ---> This Modules top serial signal RX$ ---> serial output to actual module with appropriate Object ID

Expand the outputs for each module needed downstream.
!!! The parameters will expand with the outputs. - GOOD, do this
!!! Outputs will NOT expand with the parameters and if the # parameters do not match the number of outputs - BAD, don't do this
!!! The first parameter is ignored, used as "Dummy" to line up the input signal ObjectID - param ObjectID - output signal RX for ObjectID
The parameters should contain the Object ID of the module downstream. The parameters can be ignored if the serial inputs are used.

The serial inputs can be expanded and used to over write the parameter data during runtime. 

#HELP_END

// ________________________________________________________________________________________ Simpl Input - Output 
Buffer_Input   RX$[1024]                  ;
String_Input   Module_ID[cMaxModules][4]  ;

String_Output  Module[cMaxModules]        ;

// __________________________________________________________________________________________________ Parameters
String_Parameter Dummy[1]                 ;
#BEGIN_PARAMETER_PROPERTIES Dummy
	propValidUnits   = unitString         ;
	propDefaultUnit  = unitString         ;
	propDefaultValue = "Not Used"         ;
#END_PARAMETER_PROPERTIES

String_Parameter Default_Module_ID[cMaxModules][4] ;
#BEGIN_PARAMETER_PROPERTIES Default_Module_ID
	propValidUnits  = unitString          ;
	propDefaultUnit = unitString          ;
#END_PARAMETER_PROPERTIES

// _____________________________________________________________________________________________ Global Varibles
Integer g_iNumModules                  ;
String  g_sSrchString[cMaxModules][4]  ;                                                                         
String  g_sReply[128]                  ;
// ___________________________________________________________________________________________________ Functions
Function fBuildSearchStrings()
{
	Integer i                                      ;
	
	For( i = 1 To g_iNumModules Step 1 )
	{
		g_sSrchString[i] = Default_Module_ID[i]    ;
	}
}
		
// ________________________________________________________________________________________________ Simpl Events
Threadsafe Change RX$
{
	String sRXModule[4]                                                               ; 
	Integer i                                                                         ;
    While(1)
    {
		g_sReply = Gather("\x03\x03\x03\x03\x03", RX$)                                ;
		
		If(Len(RX$))
		{
			While(Byte(RX$, 1) = 3 )
			{
				g_sReply = g_sReply + RemoveByLength(1, RX$)                              ;
			}
		}
		
		sRXModule = Mid(g_sReply, 6, 3)                                               ;

		For(i = 1 To g_iNumModules Step 1)
		{
			If ( sRXModule = g_sSrchString[i] )
			{
				Module[i] = g_sReply                                                  ;
				Break                                                                 ;
			}
			Else If ( sRXModule = "\x00\x00\x00" )
			{
				Module[i] = g_sReply                                                  ;
			}
		} 		
	}
}

Change Module_ID
{
	Integer i                               ;
	
	i = GetLastModifiedArrayIndex()         ;
	
	If( Len(Module_ID[i]) )
	{
		g_sSrchString[i] = Module_ID[i]     ;
	}
}

// ________________________________________________________________________________________________ Start Up Code
Function Main()
{
	Integer i                                            ;

	For( g_iNumModules = cMaxModules To 1 Step -1 )
	{
		If( IsSignalDefined( Module[g_iNumModules] ) )
			Break                                        ;
	}
	fBuildSearchStrings()                                ;
}



