/* GreenPoint TDI 

Development Notes _________________________________________________________________________ Development Notes /*
Original Module
//#SYMBOL_NAME "BSS Soundweb London Gain v4.0"
Dealer Name:	Crestron Electronics
Programmer:		PAC

v0.2  : Changed name of module to Gain Mono to match the London Architect object name.

v0.1  : Rewrite of Subscribe logic
        Used universal functions for volume and booleans
        Bug Fix - Parsing crestron internal delimiter now pulls in all trailing \x03 chrs. Prevents controls
			from breaking when the checksum byte is \x03, also prevents error posts of accessing array out
			of bounds.
			        
v0.0  : Release to Production

Development Notes _________________________________________________________________________ Development Notes */

// ________________________________________________________________________________ Module Compile Time Behavior
//#DEFINE_CONSTANT cDebug  1
#OUTPUT_SHIFT            3
#CATEGORY                "34"
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING

#If_Defined cDebug
#Enable_Trace
#EndIf

// ___________________________________________________________________________________________________ Constants
#DEFINE_CONSTANT cBoolean_On      "\x01"
#DEFINE_CONSTANT cBoolean_Off     "\x00"

#DEFINE_CONSTANT cUnSubscribe           0
#DEFINE_CONSTANT cSubscribe             1
#DEFINE_CONSTANT cReSubscribe           2


// _____________________________________________________________________________________________________ F1 Help
//#HINT                              ""
//#HELP_PDF_FILE ""

#HELP_BEGIN
GreenPoint TDI   www.greenpointtdi.com

Mute/Polarity 1d = On
Mude/Polarity 2d = Off

#HELP_END

// ________________________________________________________________________________________ Simpl Input - Output 
Digital_Input _SKIP_                              ;
Digital_Input Subscribe                           ;
Digital_Input _SKIP_                              ;
Buffer_Input  RX$[400]                            ;
String_Input  Object_ID[3]                        ;
Analog_Input  _SKIP_                              ;
Analog_Input  Chan_Vol                            ;
Analog_Input  Chan_Polarity                       ;
Analog_Input  Chan_Mute                           ;

String_Output TX$                                 ;
String_Output Object_ID_FB                        ;
Analog_Output _SKIP_                              ;
Analog_Output Chan_Vol_FB                         ;
Analog_Output Chan_Polarity_FB                    ;
Analog_Output Chan_Mute_FB                        ;

// _____________________________________________________________________________________________ Global Varibles
String  g_sObject_ID[3]        ;
Integer g_iNum_Chan_Used       ;
Integer g_iChan_Vol            ;

Integer g_iRx_OK;
String  g_sReply[40]           ;

// __________________________________________________________________________________________________ Parameters
String_Parameter Default_Object_ID[3]                                                             ;
#BEGIN_PARAMETER_PROPERTIES Default_Object_ID
	propValidUnits       = unitString                                                             ;
	propDefaultUnit      = unitString                                                             ;
	propDefaultValue     = "\x00\x00\x00"                                                         ;
	propShortDescription = "3 Hex Characters retrieved from the .architect file"                  ;
#END_PARAMETER_PROPERTIES

// ___________________________________________________________________________________________________ Functions
Integer_Function fVolumePercentToI(String str)
{
	Integer iReturn ;
	
	If(!(Mid(str, 3, 1) = "\x00"))
	{                   
		iReturn = (Byte(str, 2)* 2) + 1 ;
	}
	Else 
	{
		iReturn = Byte(str, 2) * 2 ;
	} 	
    Return (iReturn);
}
Function fSet_VolumePercent(Integer SV, Integer Vol_Data)
{
	String sVol[4] ;                 
	
	If (Vol_Data MOD 2 = 0)    sVol = "\x00" + chr(Vol_Data/2) + "\x00\x00" ;
	Else                       sVol = "\x00" + chr(Vol_Data/2) + "\x80\x00" ;
		
	makeString(TX$, "\x8D\x00\x00\x03%s%s%s%s\x03\x03\x03\x03\x03", g_sObject_ID, chr(High(SV)), chr(Low(SV)), sVol);
}		

Function fSet_Boolean(Integer SV, String Boolean)
{
	makeString(TX$, "\x88\x00\x00\x03%s%s%s\x00\x00\x00%s\x03\x03\x03\x03\x03", g_sObject_ID, chr(High(SV)), chr(Low(SV)), Boolean);
	
	If(Subscribe)
    makeString(TX$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", g_sObject_ID, chr(High(SV)), chr(low(SV)));   	    
}

Function fSubscribe(Integer Do_What)
{
	Integer i                                                                                                                                                   ;
	
	If(Do_What = cUnSubscribe || Do_What = cReSubscribe)
	{	
		For(i = 0 To (g_iNum_Chan_Used - 1) Step 1) //subscribe to all variables for feedback
		{
			makeString(TX$, "\x8F\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", g_sObject_ID, chr(High(i    )), chr(Low(i    )) )                     ; // Volume
			makeString(TX$, "\x8A\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", g_sObject_ID, chr(High(i + 1)), chr(Low(i + 1)) )                     ; // Mute			
			makeString(TX$, "\x8A\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", g_sObject_ID, chr(High(i + 2)), chr(Low(i + 2)) )                     ; // Polarity
		}
	}
	
	Delay(20)                                                                                                                                                   ;
	
	If(Do_What = cSubscribe || Do_What = cReSubscribe)
	{
		For(i = 0 To (g_iNum_Chan_Used - 1) Step 1) //subscribe to all variables for feedback
		{
			makeString(TX$, "\x8E\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", g_sObject_ID, chr(High(i    )), chr(Low(i    )) )                     ; // Volume
			makeString(TX$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", g_sObject_ID, chr(High(i + 1)), chr(Low(i + 1)) )                     ; // Mute			
			makeString(TX$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", g_sObject_ID, chr(High(i + 2)), chr(Low(i + 2)) )                     ; // Polarity   	    
		}
	}
}

Function fReSubscribe()
{
	Wait(100, wReSubscribe)
	{
		fSubscribe(cReSubscribe) ;
	}
}

// ________________________________________________________________________________________________ Simpl Events
//____________________________________________________________ Subscribe
Push    Subscribe
{
	If(Len(Object_ID) = 3) fSubscribe(cSubscribe)   ;
}

Release Subscribe
{
    If(Len(Object_ID) = 3) fSubscribe(cUnSubscribe) ;
}

//____________________________________________________________ Volume
Change Chan_Vol
{		
	If(g_iChan_Vol <> Chan_Vol)
	{
    	g_iChan_Vol = Chan_Vol                ;
    	
		Chan_Vol_FB = g_iChan_Vol             ;
		
		fSet_VolumePercent(0, g_iChan_Vol)    ;
	}
}
//____________________________________________________________ Mute
Change Chan_Mute
{
	If     (Chan_Mute = 1)   fSet_Boolean(1, cBoolean_On )  ;
	Else If(Chan_Mute = 2)   fSet_Boolean(1, cBoolean_Off)  ;
}
//____________________________________________________________ Polarity
Change Chan_Polarity
{
	If     (Chan_Polarity = 1)   fSet_Boolean(2, cBoolean_On )  ;
	Else If(Chan_Polarity = 2)   fSet_Boolean(2, cBoolean_Off)  ;
}

Change RX$
{
	If (g_iRx_OK)
	{	
		g_iRx_OK = 0 ;
		while(Find("\x03\x03\x03\x03\x03", RX$))
		{
			g_sReply = remove("\x03\x03\x03\x03\x03", RX$);
			
			While(Len(RX$) && Byte(RX$, 1) = 3 )
			{
				g_sReply = g_sReply + RemoveByLength(1, RX$)                                        ;
			}
			
			If((Mid(g_sReply, 6, 3) = "\x00\x00\x00") || (mid(g_sReply, 6, 3) = g_sObject_ID)) // ObjectID Matches
			{                 
				Switch(Byte(g_sReply, 10))
				{
					case (0):
					{  
						g_iChan_Vol = fVolumePercentToI(mid(g_sReply, 11, 4))        ;
						Chan_Vol_FB = g_iChan_Vol                                    ;
					}
					case (1): Chan_Mute_FB = byte(g_sReply, 14)                      ;
					case (2): Chan_Polarity_FB = byte(g_sReply, 14)                  ;
				}
			}
		}
		g_iRx_OK = 1;
	}	
}

Change Object_ID
{
	If(Len(Object_ID) = 3)
	{
		g_sObject_ID = Object_ID         ;
		Object_ID_FB = g_sObject_ID      ;
		
		If(Subscribe)
    	{
    		CancelWait(wReSubscribe) ;
    		fReSubscribe()           ;
    	}
	}
}

// ________________________________________________________________________________________________ Start Up Code
Function Main()
{
	g_sObject_ID = Default_Object_ID ;
	Object_ID_FB = g_sObject_ID      ;
	
	g_iNum_Chan_Used = 1             ;
	
	g_iRx_OK = 1                     ;
}
