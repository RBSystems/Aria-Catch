/* GreenPoint TDI 

Development Notes _________________________________________________________________________ Development Notes /*
Original Module
//#SYMBOL_NAME "N-Gain 8 Chan Basic v4.0"
Dealer Name:	Crestron Electronics
Programmer:		PAC

v0.3  : Rewrite of Subscribe logic
        Used universal functions for volume and booleans
        CHANGED MODULE NAME to match the processing object in London Architect (was "N-Gain" and now "Gain N-Input")
        Added constants for the Master SVs
        Bug Fix - Parsing crestron internal delimiter now pulls in all trailing \x03 chrs. Prevents controls
			from breaking when the checksum is \x03, also prevents error posts of accessing array out
			of bounds.

v0.2  : Bug Fixed output index for mute and polarity in parsing routine, bug effected channels only - master was fine in v0.1

v0.1  : Dynamic addressing of object IDs
		Edited parsing

v0.0  : new notation of varaibles

SV = State Variable
VD = Virtual Device		

0x00 Basic settings
0x01 Links
0x02 Logic objects
0x03 Audio processing objects

 STX   ID Palyload Checksum  ETX
\x02   |   Message Body   |  \x03

ID
\x88 DI_Set_SV                  ID_Node_VD_Object_SVID_Data
\x89 DI_Subscribe_SV            ID_Node_VD_Object_SVID_Data
\x8A DI_Unsubscribe_SV          ID_Node_VD_Object_SVID_Data

ID
\x8B DI_Venue_Preset_Recall     ID_PresetID
\x8C DI_Parameter_Preset_Recall ID_PresetID

ID
\x8D DI_Set_SV_Percent          ID_Node_VD_Object_SVID_Data
\x8E DI_Subscribe_SV_Percent    ID_Node_VD_Object_SVID_Data
\x8F DI_Unsubscribe_SV_Percent  ID_Node_VD_Object_SVID_Data
\x90 DI_Bump_SV_Percent         ID_Node_VD_Object_SVID_Data

Control parameters (also called 'State Variables') on a Soundweb London device are logically grouped into
Virtual Devices (corresponding to categories of objects, such as Audio and Logic) and
Objects (corresponding to individual processing objects). Each Object is uniquely identified on the
Soundweb London network by its HiQnet address. HiQnet addresses are typically represented in hexadecimal
and have the following format: 0xNode VD Object.

N-Gain Mute
Start  Type Node    VD    Object     State Var High     State Var Low       Data            Etx | Bullshit added in crestron land
STX 
\x02  "\x88\x00\x00\x03 g_sObject_ID chr(high(stateVar) chr(low(stateVar) \x00\x00\x00\x01  \x03\x03\x03\x03\x03" 


Development Notes _________________________________________________________________________ Development Notes */

// ________________________________________________________________________________ Module Compile Time Behavior
//#DEFINE_CONSTANT cDebug  1
#OUTPUT_SHIFT            3
#CATEGORY                "34"
#DEFAULT_VOLATILE
#ANALOG_SERIAL_EXPAND    InputsWithOutputs
#ENABLE_STACK_CHECKING

#If_Defined cDebug
#Enable_Trace
#EndIf

// ___________________________________________________________________________________________________ Constants
#DEFINE_CONSTANT cMax_Chan        32
#DEFINE_CONSTANT cBoolean_On      "\x01"
#DEFINE_CONSTANT cBoolean_Off     "\x00"

#DEFINE_CONSTANT cMaster_Vol_SV         96
#DEFINE_CONSTANT cMaster_Mute_SV        97

#DEFINE_CONSTANT cUnSubscribe           0
#DEFINE_CONSTANT cSubscribe             1
#DEFINE_CONSTANT cReSubscribe           2

// _____________________________________________________________________________________________________ F1 Help
//#HINT                              ""
//#HELP_PDF_FILE ""
#HELP_BEGIN
GreenPoint TDI   www.greenpointtdi.com

Mute/Polarity 1d = On
Mute/Polarity 2d = Off

Expand the MUTE INPUT signals to the number of channels needed and define signal names.
This module will internally detect how many mute signals are defined and only use those channels.	
#HELP_END

// ________________________________________________________________________________________ Simpl Input - Output 
Digital_Input _SKIP_                              ;
Digital_Input Subscribe                           ;
Digital_Input _SKIP_                              ;
Buffer_Input  RX$[400]                            ;
String_Input  Object_ID[3]                        ;
Analog_Input  _SKIP_                              ;
Analog_Input  Master_Vol                          ;
Analog_Input  Master_Mute                         ;
Analog_Input  _SKIP_                              ;
Analog_Input  Chan_Vol[cMax_Chan]                 ;
Analog_Input  Chan_Polarity[cMax_Chan]            ;
Analog_Input  Chan_Mute[cMax_Chan]                ;

String_Output TX$                                 ;
String_Output Object_ID_FB                        ;
Analog_Output _SKIP_                              ;
Analog_Output Master_Vol_FB                       ;
Analog_Output Master_Mute_FB                      ;
Analog_Output _SKIP_                              ;
Analog_Output Chan_Vol_FB[cMax_Chan]              ;
Analog_Output Chan_Polarity_FB[cMax_Chan]         ;
Analog_Output Chan_Mute_FB[cMax_Chan]             ;

// _____________________________________________________________________________________________ Global Varibles
String  g_sObject_ID[3]        ;
Integer g_iNum_Chan_Used       ;

Integer g_iMaster_Vol          ;
Integer g_iChan_Vol[cMax_Chan] ;
		
Integer g_iRx_OK               ; // Parsing Routine Semaphore
String  g_sReply[40]           ; // Parsing Routine Single Reply
Integer g_iReply_SV            ; // Parsing Routine which state var (which channel and which attribute) of the N-Gain

// __________________________________________________________________________________________________ Parameters
String_Parameter Default_Object_ID[3]                                                             ;
#BEGIN_PARAMETER_PROPERTIES Default_Object_ID
	propValidUnits       = unitString                                                             ;
	propDefaultUnit      = unitString                                                             ;
	propDefaultValue     = "\x00\x00\x00"                                                         ;
	propShortDescription = "3 Hex Characters retrieved from the .architect file"                  ;
#END_PARAMETER_PROPERTIES

// ___________________________________________________________________________________________________ Functions
Integer_Function fVolumePercentToI(String str)
{
	Integer iReturn ;
	
	If(!(mid(str, 3, 1) = "\x00"))
	{                   
		iReturn = (byte(str, 2)* 2) + 1 ;
	}
	Else 
	{
		iReturn = byte(str, 2) * 2 ;
	} 	
    Return (iReturn);
}

Function fSet_VolumePercent(Integer SV, Integer Vol_Data)
{
	String sVol[4] ;                 
	
	If (Vol_Data MOD 2 = 0)    sVol = "\x00" + chr(Vol_Data/2) + "\x00\x00" ;
	Else                       sVol = "\x00" + chr(Vol_Data/2) + "\x80\x00" ;
		
	makeString(TX$, "\x8D\x00\x00\x03%s%s%s%s\x03\x03\x03\x03\x03", g_sObject_ID, chr(High(SV)), chr(Low(SV)), sVol);
}

Function fSet_Boolean(Integer SV, String Boolean)
{
	makeString(TX$, "\x88\x00\x00\x03%s%s%s\x00\x00\x00%s\x03\x03\x03\x03\x03", g_sObject_ID, chr(High(SV)), chr(Low(SV)), Boolean);
	
	If(Subscribe)
    makeString(TX$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", g_sObject_ID, chr(High(SV)), chr(low(SV)));   	    
}

Function fSubscribe(Integer Do_What)
{
	Integer i                                                                                                                                                   ;
	
	If(Do_What = cUnSubscribe || Do_What = cReSubscribe)
	{	
		For(i = 0 To (g_iNum_Chan_Used - 1) Step 1) //subscribe to all variables for feedback
		{
			makeString(TX$, "\x8F\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", g_sObject_ID, chr(High(i     )), chr(Low(i     )) )                   ; // Volume
			makeString(TX$, "\x8A\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", g_sObject_ID, chr(High(i + 32)), chr(Low(i + 32)) )                   ; // Mute			
			makeString(TX$, "\x8A\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", g_sObject_ID, chr(High(i + 64)), chr(Low(i + 64)) )                   ; // Polarity
		}
			makeString(TX$, "\x8A\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", g_sObject_ID, chr(High(cMaster_Mute_SV)), chr(Low(cMaster_Mute_SV)) ) ; // Master Mute   	    
			makeString(TX$, "\x8F\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", g_sObject_ID, chr(High(cMaster_Vol_SV )), chr(Low(cMaster_Vol_SV )) ) ; // Master Volume
	}
	
	Delay(20)                                                                                                                                                   ;
	
	If(Do_What = cSubscribe || Do_What = cReSubscribe)
	{
		For(i = 0 To (g_iNum_Chan_Used - 1) Step 1) //subscribe to all variables for feedback
		{
			makeString(TX$, "\x8E\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", g_sObject_ID, chr(High(i     )), chr(Low(i     )) )                   ; // Volume
			makeString(TX$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", g_sObject_ID, chr(High(i + 32)), chr(Low(i + 32)) )                   ; // Mute			
			makeString(TX$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", g_sObject_ID, chr(High(i + 64)), chr(Low(i + 64)) )                   ; // Polarity   	    
		}
			makeString(TX$, "\x89\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", g_sObject_ID, chr(High(cMaster_Mute_SV)), chr(Low(cMaster_Mute_SV)) ) ; // Master Mute   	    
			makeString(TX$, "\x8E\x00\x00\x03%s%s%s\x00\x00\x00\x00\x03\x03\x03\x03\x03", g_sObject_ID, chr(High(cMaster_Vol_SV )), chr(Low(cMaster_Vol_SV )) ) ; // Master Volume
	}
}

Function fReSubscribe()
{
	Wait(100, wReSubscribe)
	{
		fSubscribe(cReSubscribe) ;
	}
}

// ________________________________________________________________________________________________ Simpl Events
Push    Subscribe
{
	If(Len(Object_ID) = 3) fSubscribe(cSubscribe)   ;
}

Release Subscribe
{
    If(Len(Object_ID) = 3) fSubscribe(cUnSubscribe) ;
}


//____________________________________________________________ Volume
Change Master_Vol
{	
	If(g_iMaster_Vol <> Master_Vol)
	{
    	g_iMaster_Vol = Master_Vol                            ;
		
		Master_Vol_FB = g_iMaster_Vol                         ;
		
		fSet_VolumePercent(cMaster_Vol_SV, g_iMaster_Vol)     ;
	}
}
Change Chan_Vol
{	
	Integer iSV                                               ;
	
	iSV = GetLastModifiedArrayIndex()                         ;
	
	If(g_iChan_Vol[iSV] <> Chan_Vol[iSV])
	{
    	g_iChan_Vol[iSV] = Chan_Vol[iSV]                      ;
    	
		Chan_Vol_FB[iSV] = g_iChan_Vol[iSV]                   ;
		
		fSet_VolumePercent(iSV - 1, g_iChan_Vol[iSV])         ;
	}
}
//____________________________________________________________ Polarity
Change Chan_Polarity
{
	Integer iSV, iCh                                                   ;
	
	iCh = GetLastModifiedArrayIndex()                                  ;
	iSV = (iCh - 1) + 64                                               ;
	
	If     (Chan_Polarity[iCh] = 1)   fSet_Boolean(iSV, cBoolean_On )  ;
	Else If(Chan_Polarity[iCh] = 2)   fSet_Boolean(iSV, cBoolean_Off)  ;
}
//____________________________________________________________ Mutes
Change Master_Mute
{
	If     (Master_Mute = 1) fSet_Boolean(cMaster_Mute_SV, cBoolean_On )            ;
	Else If(Master_Mute = 2) fSet_Boolean(cMaster_Mute_SV, cBoolean_Off)            ;
}

Change Chan_Mute
{
	Integer iSV, iCh                                               ;
	
	iCh = GetLastModifiedArrayIndex()                              ;
	iSV = (iCh - 1) + 32                                           ;
	
	If     (Chan_Mute[iCh] = 1)   fSet_Boolean(iSV, cBoolean_On )  ;
	Else If(Chan_Mute[iCh] = 2)   fSet_Boolean(iSV, cBoolean_Off)  ;
}
//____________________________________________________________ Parse
Change RX$
{
	If(g_iRx_OK)
	{	
		g_iRx_OK = 0                                                                                ;
		While(Find("\x03\x03\x03\x03\x03", RX$))			
		{ 
			g_sReply = Remove("\x03\x03\x03\x03\x03", RX$)                                          ;
			
			While(Len(RX$) && Byte(RX$, 1) = 3 )
			{
				g_sReply = g_sReply + RemoveByLength(1, RX$)                                        ;
			}
			
			If((Mid(g_sReply, 6, 3) = "\x00\x00\x00") || (Mid(g_sReply, 6, 3) = g_sObject_ID)) // ObjectID Matches
			{   
				g_iReply_SV = ((Byte(g_sReply, 9) * 256 ) + Byte(g_sReply, 10))                     ;
				
                If(g_iReply_SV < 32)
                {
                	g_iChan_Vol[g_iReply_SV + 1] =          fVolumePercentToI(Mid(g_sReply, 11, 4)) ;
					Chan_Vol_FB[g_iReply_SV + 1] = g_iChan_Vol[g_iReply_SV + 1]                     ;
                }
                Else If(g_iReply_SV < 64)    Chan_Mute_FB[g_iReply_SV - 31] = Byte(g_sReply, 14)    ;
                Else If(g_iReply_SV < 96)Chan_Polarity_FB[g_iReply_SV - 63] = Byte(g_sReply, 14)    ;
                Else If(g_iReply_SV = cMaster_Vol_SV)
                {
                	g_iMaster_Vol =                         fVolumePercentToI(Mid(g_sReply, 11, 4)) ;
					Master_Vol_FB = g_iMaster_Vol                                                   ;
                }
                Else If(g_iReply_SV = cMaster_Mute_SV)    Master_Mute_FB    = Byte(g_sReply, 14)    ;
                
                
			}
		}
		g_iRx_OK = 1                                                                                ;
	}	
}

Change Object_ID
{
	If(Len(Object_ID) = 3)
	{
		g_sObject_ID = Object_ID         ;
		Object_ID_FB = g_sObject_ID      ;
		
		If(Subscribe)
    	{
    		CancelWait(wReSubscribe) ;
    		fReSubscribe()           ;
    	}
	}
}

// ________________________________________________________________________________________________ Start Up Code
Function Main()
{	
	For(g_iNum_Chan_Used = cMax_Chan To 1 Step -1)
	{
		If(IsSignalDefined(Chan_Mute[g_iNum_Chan_Used])) Break ;
	}	
	g_sObject_ID = Default_Object_ID ;
	Object_ID_FB = g_sObject_ID      ;
	
	g_iRx_OK = 1                     ;
}


